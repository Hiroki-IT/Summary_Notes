# バージョン
version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@6.11.0
  aws-ecs: circleci/aws-ecs@1.2.0

commands:
  # checkoutに日本語対応化
  setup-git-config:
    steps:
      - run:
          
          name: Setup git config
          command: |
            git config --global core.quotepath false
  
  # ソースコードをワークスペースに保存
  persist-deploy-source:
    steps:
      - run:
          name: Make dir & Copy source to workspace
          command: |
            mkdir -p ./workspace/app/build
            cp -rp ./app/build/* ./workspace/app/build
      - persist_to_workspace:
          root: ./workspace
          paths:
            - ./app/build

# ジョブの設定
jobs:
  push-builder-images:
    # ホスト側環境の設定
    machine: true
    # ソースコードの配置先を，/root/project(=tech-notebook) に設定
    steps:
      - setup-git-config
      # ソースコードをコピー
      - checkout
      - run:
          name: Build builder
          command: |
            docker build -f ./infra/docker/builder/Dockerfile -t ${DOCKER_USER}/${REPOSITORY_NAME_BUILDER} .
      - run:
          name: Login to docker hub
          command: |
            echo ${DOCKER_PASS} |
            docker login -u ${DOCKER_USER} --password-stdin
      - run:
          name: Push builder
          command: |
            docker push ${DOCKER_USER}/${REPOSITORY_NAME_BUILDER}:${VERSION}
  
  push-www-images:
    # ホスト側環境の設定
    machine: true
    # ソースコードの配置先を，/root/project(=tech-notebook) に設定
    steps:
      - setup-git-config
      # ソースコードをコピー
      - checkout
      - run:
          name: Build www
          command: |
            docker build -f ./infra/docker/www/Dockerfile -t ${DOCKER_USER}/${REPOSITORY_NAME_WWW} .
      - run:
          name: Login to docker hub
          command: |
            echo ${DOCKER_PASS} |
            docker login -u ${DOCKER_USER} --password-stdin
      - run:
          name: Push www
          command: |
            docker push ${DOCKER_USER}/${REPOSITORY_NAME_WWW}:${VERSION}

  make-deploy-source:
    # ホスト側環境の設定
    docker:
      - image: ${DOCKER_USER}/${REPOSITORY_NAME_BUILDER}:${VERSION}
    # ソースコードの配置先を，/root/project(=tech-notebook) に設定
    steps:
      - setup-git-config
      # ソースコードをコピー
      - checkout
      - run:
          # 本番環境にデプロイされるappディレクトリに移動
          # デプロイ用のHtmlを生成
          name: Make html
          command: |
            cd ./app
            make html

# 実行の順番を定義
workflows:
  version: 2.1
  build-push:
    jobs:
      # Deploy Image To Docker Hub
      - push-builder-images:
          filters:
            branches:
              only:
                # NOTE: デプロイする場合は指定のブランチを作成
                - feature/update_infrastructure
      # Deploy Image To Docker Hub
      - push-www-images:
          filters:
            branches:
              only:
                # NOTE: デプロイする場合は指定のブランチを作成
                - feature/update_infrastructure
      # Make Deploy Source
      - make-deploy-source:
          requires:
            - push-builder-images
            - push-www-images
          post-steps:
            - persist-deploy-source
      # Deploy Production Image To ECR www -- Fix: env_var_name型設定項目は，${}をつけずに環境変数を出力
      - aws-ecr/build-and-push-image:
          requires:
            - make-deploy-source
          name: build-and-push-image-www
          dockerfile: ./infra/docker/www/production.Dockerfile
          path: '.'
          repo: ${REPOSITORY_NAME_WWW}
          create-repo: true
          tag: latest
          attach-workspace: true
          workspace-root: ./workspace
      # Deploy Service To ECS www
      - aws-ecs/deploy-service-update:
          requires:
            - build-and-push-image-www
          name: deploy-service-update-www
          family: "${APP_NAME}-ecs-task-definition"
          cluster-name: "${APP_NAME}-ecs-cluster"
          service-name: "${APP_NAME}-ecs-service"
          deployment-controller: CODE_DEPLOY
          codedeploy-application-name: ${APP_NAME}
          codedeploy-deployment-group-name: "${APP_NAME}-deployment-group"
          codedeploy-load-balanced-container-name: www-container
          codedeploy-load-balanced-container-port: 80
          container-image-name-updates: "container=www-container,tag=latest"
      # Run Fargate
      - aws-ecs/run-task:
          requires:
            - deploy-service-update-www
          name: run-task-fargate
          cluster: "${APP_NAME}-ecs-cluster"
          platform-version: 1.3.0
          assign-public-ip: ENABLED
          awsvpc: true
          launch-type: FARGATE
          task-definition: "${APP_NAME}-ecs-task-definition"
          subnet-ids: $AWS_SUBNET_IDS
          security-group-ids: $AWS_SUBNET_GROUPS