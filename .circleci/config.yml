# バージョン
version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@6.9.0
  aws-ecs: circleci/aws-ecs@1.2.0
  aws-code-deploy: circleci/aws-code-deploy@1.0.1

# ジョブの設定
jobs:
  push-images:
    # ホスト側環境の設定
    machine: true
    # ソースコードの配置先を，/root/project(=tech-notebook) に設定．
    steps:
      - run:
          # -- Fix: checkoutが日本語を認識できないので対処
          name: Setup git config
          command: |
            git config --global core.quotepath false
      # ソースコードをコピー
      - checkout
      - run:
          name: Build builder
          command: |
            docker build -f ./infra/docker/builder/Dockerfile -t ${DOCKER_USER}/${REPOSITORY_NAME_BUILDER} .
      - run:
          name: Build www
          command: |
            docker build -f ./infra/docker/www/Dockerfile -t ${DOCKER_USER}/${REPOSITORY_NAME_WWW} .
      - run:
          name: Login to docker hub
          command: |
            echo ${DOCKER_PASS} |
            docker login -u ${DOCKER_USER} --password-stdin
      - run:
          name: Push builder
          command: |
            docker push ${DOCKER_USER}/${REPOSITORY_NAME_BUILDER}:${VERSION}
      - run:
          name: Push www
          command: |
            docker push ${DOCKER_USER}/${REPOSITORY_NAME_WWW}:${VERSION}

  build-app:
    # ホスト側環境の設定
    docker:
      - image: ${DOCKER_USER}/${REPOSITORY_NAME_BUILDER}:${VERSION}
    # ソースコードの配置先を，/root/project(=tech-notebook) に設定．
    steps:
      - run:
          # -- Fix: checkoutが日本語を認識できないので対処
          name: Setup git config
          command: |
            git config --global core.quotepath false
      # ソースコードをコピー
      - checkout
      - run:
          # 本番環境にデプロイされるappディレクトリに移動
          # Htmlの生成
          name: Make html
          command: |
            cd ./app
            make html

# 実行の順番を定義
workflows:
  version: 2.1
  build-push:
    jobs:
      # Deploy Image To Docker Hub
      - push-images:
          filters:
            branches:
              only:
                # NOTE: デプロイする場合は指定のブランチを作成
                - feature/update_infrastructure
      # Build App
      - build-app:
          requires:
            - push-images
          post-steps:
            - persist_to_workspace:
                root: .
                paths:
                  - ./app/build
      # Deploy Image To ECR builder -- Fix: env_var_name型とstring型の間で，変数展開の記述方法が異なる
      - aws-ecr/build-and-push-image:
          requires:
            - build-app
          name: build-and-push-image-builder
          dockerfile: ./infra/docker/builder/Dockerfile
          path: '.'
          repo: ${REPOSITORY_NAME_BUILDER}
          create-repo: true
          tag: ${CIRCLE_SHA1}
      # Deploy Image To ECR www -- Fix: env_var_name型設定項目は，${}をつけずに環境変数を出力
      - aws-ecr/build-and-push-image:
          requires:
            - build-app
          name: build-and-push-image-www
          dockerfile: ./infra/docker/www/Dockerfile
          path: '.'
          repo: ${REPOSITORY_NAME_WWW}
          create-repo: true
          tag: ${CIRCLE_SHA1}
      # Deploy Source Code
      - aws-code-deploy/deploy:
          requires:
            - build-and-push-image-builder
            - build-and-push-image-www
          pre-steps:
            - attach_workspace:
                at: ./app/build
          name: deploy-source-code
          application-name: ${APP_NAME}
          bundle-bucket: "${APP_NAME}-bucket"
          bundle-source: ./app/build
          bundle-key: ${CIRCLE_SHA1}
          deployment-config: CodeDeployDefault.ECSAllAtOnce
          deployment-group: "${APP_NAME}-deployment-group"
          service-role-arn: ${TECH_NOTEBOOK_CODE_DEPLOY_ROLE_FOR_ECS}
      # Deploy Service To ECS builder -- Fix: string型設定項目は，${}をつけて環境変数を出力
      - aws-ecs/deploy-service-update:
          requires:
            - deploy-source-code
          name: deploy-service-update-builder
          family: "${APP_NAME}-ecs-task-definition"
          cluster-name: "${APP_NAME}-ecs-cluster"
          service-name: "${APP_NAME}-ecs-service"
          container-image-name-updates: "container=builder-container,tag=${CIRCLE_SHA1}"
      # Deploy Service To ECS www
      - aws-ecs/deploy-service-update:
          requires:
            - deploy-source-code
          name: deploy-service-update-www
          family: "${APP_NAME}-ecs-task-definition"
          cluster-name: "${APP_NAME}-ecs-cluster"
          service-name: "${APP_NAME}-ecs-service"
          container-image-name-updates: "container=www-container,tag=${CIRCLE_SHA1}"
      # Run Fargate
      - aws-ecs/run-task:
          requires:
            - deploy-service-update-builder
            - deploy-service-update-www
          name: run-task-fargate
          cluster: "${APP_NAME}-ecs-cluster"
          awsvpc: true
          launch-type: FARGATE
          task-definition: "${APP_NAME}-ecs-task-definition"
          subnet-ids: $AWS_SUBNET_IDS
          security-group-ids: $AWS_SUBNET_GROUPS